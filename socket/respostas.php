<?php
$host = 'localhost';// EndereÃ§o de sua aplicaÃ§Ã£o
$port = '9000'; // Configure uma porta, lembre-se que ela tem que ser deixada aberta! EntÃ£o cuidado para nÃ£o ter erros
$null = NULL; // E uma variÃ¡vel com valor nulo para ser enviado quando os buffers forem vazios
// Criando socket TCP/IP confugurado stream. Ler: rfc645
$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
// Configurando opÃ§Ãµes para aplicaÃ§Ã£o socket
socket_set_option($socket, SOL_SOCKET, SO_REUSEADDR, 1);
// configurando a porta, sintaxe: socket_bind(socket criada, endereÃ§o[Quando zero ou nulo Ã© o localhost], e porta.. valor inteiro)
socket_bind($socket,0, $port);
// Como o nome jÃ¡ descritivo falam ouve tal conexÃ£o
socket_listen($socket);
// Cria e lista os sockets, afinal ... vamos receber mais de uma pessoa, possui forma de array:[]
$clients = array($socket);
// Iniciamos loop onde nÃ£o pararÃ¡, o servidor agora que precisa de um rasoÃ¡vel desempenho e nÃ£o o aparelho do client side
while (true) {
	// Usando dados da variÃ¡vel que Ã© um array jÃ¡ declarada na linha 14
	$changed = $clients;
	// Seleciona destino e executa chamada sintaxe: socket_select($ArrayDeSocket, $EspaÃ§oParaGravar[forma de array], $ExcessoesParaNÃ£oDeletar[forma de array], $valorInteiroDoFim[Em Segundos], $valorInteiroDofim[Em Milesegundos]);
	// Essa operaÃ§Ã£o nÃ£o traz informaÃ§Ãµes detalhadas no manual do php, essa sintÃ¡xe se assimila ao padrÃ£o da linguagem C disponÃ­vel:
	// http://man7.org/linux/man-pages/man2/select_tut.2.html [Ingles]
	socket_select($changed, $null, $null, 0, 10);

	// Verifica se o changed esta na array da conexÃ£o
	if (in_array($socket, $changed)) {
		$socket_new = socket_accept($socket); // InformaÃ§Ãµes de aparelho conectado

		$clients[] = $socket_new; // Adiciona o socket ao cliente

		// socket_read($socketAcept, $valorNumÃ©ricoDosDados) | A no firefox antes do Gecko 11.0 eram 16MB o mÃ¡ximo mas atualmente 
		// o limite mÃ¡ximo Ã© 2GB!!! Mas se vocÃª nÃ£o quer nada pesado no lado do cliente Ã© bom vocÃª nÃ£o exceder essa quantidade
		$header = socket_read($socket_new, 1024); // Ler dados enviados, ler atÃ© 1024 bytes(1kb), aah nÃ£o vai dar isso tudo a gente sabe

		perform_handshaking($header, $socket_new, $host, $port); // Essa nÃ£o Ã© uma funÃ§Ã£o nativa do php (ainda) ela irÃ¡ levar os dados
		// para estabelecer uma conexÃ£o
	
		// Sintaxe: socket_getpeername($SocketAceito, $VariÃ¡velCriadaAgoraParaSerUsada);
		socket_getpeername($socket_new, $ip); // Captura o endereÃ§o de ip do socket aceito

		// A variÃ¡vel $response receberar um json que serÃ¡ transformado para que o protocolo funcione, ele farÃ¡ um pack logo a baixo
		$response = embaralhar(json_encode(array('name'=>'system', 'message'=>$ip." connected    Ì¿Ì¿ Ì¿Ì¿ Ì¿'Ì¿'\ÌµÍ‡Ì¿Ì¿\Ð·= ( â–€ ÍœÍžÊ–â–€) =Îµ/ÌµÍ‡Ì¿Ì¿/â€™Ì¿â€™Ì¿ Ì¿ Ì¿Ì¿ Ì¿Ì¿ Ì¿Ì¿ Ok, ele fez todo o processo do handshake"))); //prepare json data

		// Envia resposta com cabeÃ§alho em hexadecimal e chave, para que funcione (Isso atÃ© o php7.2 nÃ£o existe suporte, ainda
		send_message($response); // Nome bastante descritivo hehe
		
		// DestrÃ³i valor de usuÃ¡rio para nÃ£o ter problemas com dados
		$found_socket = array_search($socket, $changed);
		//Unset, nativa do php desde a versÃ£o 4 <3
		unset($changed[$found_socket]);
	}
	
	// NavegaÃ§Ã£o para processar os dados 
	foreach ($changed as $changed_socket) {	
		
		// Verifica se os dados foram de fato recebidos #### sintaxe: socket_recv($socketAceito, $valoresRecebidos,$tamanhoDeDados, flags[SÃ£o os valores pre-definidos])
		// disponÃ­vel: http://php.net/manual/fa/function.socket-recv.php [Ingles]
		while(socket_recv($changed_socket, $buf, 1024, 0) >= 1)	{
			send_message($buf); // Envia a string ðŸ˜Ž [NÃ£o Ã© nativa]
		}
		
		//Verifica a leitura dos dados e se nÃ£o houver nada remove da memÃ³ria o client
		$buf = @socket_read($changed_socket, 1024, PHP_NORMAL_READ);/// O "@" utilizado afim de economizar memÃ³ria.
		if ($buf === false) { // ler comentÃ¡rio da linha 61
			$found_socket = array_search($changed_socket, $clients);
			socket_getpeername($changed_socket, $ip);
			unset($clients[$found_socket]);
		}
	}
}
// Finaliza o socket, uma vez que cai fora do escopo
socket_close($socket);//Essa Ã© a variÃ¡vel da linha 6 Sintaxe: socket_close($primeiraConexÃ£oDeclaradaGeral)

function send_message($msg){//Declarada essa funÃ§Ã£o na linha 59 
	global $clients;// globa, para pegar variÃ¡vel fora do escopo da funÃ§Ã£o e dentro de outro escopo
	foreach($clients as $changed_socket)	{
		@socket_write($changed_socket,$msg,strlen($msg));// Sintaxe: socket_write($SocketAceita,$ConteÃºdo,$NumeroDebyte), parece com o sock_recev
	}
	return true; // Se enviado, ok
}
// PadrÃ£o de envio da rfc645 deleta os dados que antecedem a mensagem(Os valores hexadecimais), creio que serÃ¡ nativa logo logo
function desembaralhar($texto) {
	$length = ord($texto[1]) & 127;
	if($length == 126) {
		$masks = substr($texto, 4, 4);
		$data = substr($texto, 8);
	}
	elseif($length == 127) {
		$masks = substr($texto, 10, 4);
		$data = substr($texto, 14);
	}
	else {
		$masks = substr($texto, 2, 4);
		$data = substr($texto, 6);
	}
	$text = "";
	for ($i = 0; $i < strlen($data); ++$i) {
		$texto .= $data[$i] ^ $masks[$i%4];
	}
	return $texto;
}
// O inverso do que o da linha 80 faz, ele pÃµe valores hexadecimais de uma o que serÃ¡
function embaralhar($texto){
	$b1 = 0x80 | (0x1 & 0x0f);// Esse cÃ³digo se corresponde a diferentes valores que transformam os resultados
	$length = strlen($texto);
	// De acordo com o tamanho do texto ele farÃ¡ a sua entrada	

	if($length <= 125)
		$header = pack('CC', $b1, $length);// Sitaxe: pack($comoDesejaSaÃ­da, $ValorQueASaÃ­da, $tamanho), repetindo, creio que essa funÃ§Ã£o
	// apartir de um certo tempo serÃ¡ uma funÃ§Ã£o nativa, pack disponÃ­vel no manual do php:
	// http://php.net/manual/pt_BR/function.pack.php [Portugues em progressÃ£o]
	elseif($length > 125 && $length < 65536)
		$header = pack('CCn', $b1, 126, $length);
	elseif($length >= 65536)
		$header = pack('CCNN', $b1, 127, $length);
	return $header.$texto;// Dessa forma os dados do cabelhado vem antes do texto
}
// Cria um novo cliente handshaking com o padrÃ£o rfc645, Essa funÃ§Ã£o tambÃ©m Ã© bastante provavel que seja nativa do php
function perform_handshaking($receved_header,$client_conn, $host, $port){
	$headers = array();
	$lines = preg_split("/\r\n/", $receved_header);
	foreach($lines as $line)	{
		$line = chop($line);
		if(preg_match('/\A(\S+): (.*)\z/', $line, $matches)){
			$headers[$matches[1]] = $matches[2];
		}
	}
	$secKey = $headers['Sec-WebSocket-Key'];// Key padrÃ£o de valor â†“
	$secAccept = base64_encode(pack('H*', sha1($secKey . '258EAFA5-E914-47DA-95CA-C5AB0DC85B11')));
	// Segudo o padrÃ£o se deve mandar a hash sha1 em hexadecimal para base64, esse Ã© o processo
	$upgrade  = "HTTP/1.1 101 Web Socket Protocol Handshake\r\n" .// cabeÃ§alho tradicional
	"Upgrade: websocket\r\n" .
	"Connection: Upgrade\r\n" .
	"WebSocket-Origin: $host\r\n" .
	"WebSocket-Location: ws://$host:$port/demo/shout.php\r\n".
	"Sec-WebSocket-Accept:$secAccept\r\n\r\n";
	socket_write($client_conn,$upgrade,strlen($upgrade));// Envia, para sintaxe ver comentÃ¡rio da linha 76
}
